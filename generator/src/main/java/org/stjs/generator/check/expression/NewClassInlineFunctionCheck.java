package org.stjs.generator.check.expression;

import javacutils.InternalUtils;
import javacutils.TreeUtils;

import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;

import org.stjs.generator.GenerationContext;
import org.stjs.generator.utils.JavaNodes;
import org.stjs.generator.visitor.TreePathScannerContributors;
import org.stjs.generator.visitor.VisitorContributor;

import com.sun.source.tree.NewClassTree;
import com.sun.source.tree.Tree;

public class NewClassInlineFunctionCheck implements VisitorContributor<NewClassTree, Void, GenerationContext> {

	@Override
	public Void visit(TreePathScannerContributors<Void, GenerationContext> visitor, NewClassTree tree, GenerationContext context, Void prev) {
		Element type = TreeUtils.elementFromUse(tree.getIdentifier());
		if (!JavaNodes.isJavaScriptFunction(type)) {
			return null;
		}
		boolean hasMethod = false;
		for (Tree member : tree.getClassBody().getMembers()) {
			Element memberElement = JavaNodes.elementFromDeclaration(member);
			if (memberElement.getKind() == ElementKind.METHOD && !hasMethod) {
				hasMethod = true;
				continue;
			}
			if (InternalUtils.isSynthetic(member)) {
				// constructors generated by the compiler are ignored
				continue;
			}
			context.addError(member, "Initialization block for a Javascript function must contain exactly one method");
		}
		return null;
	}
}
